/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

#pragma semicolon 1

#define DELIMITER ","
#define MAX_FLAGS 10
#define FLAG_LEN 5

new const TRUEMAXPLAYERS = MAXPLAYERS + 1;

// Cvar and data pair for sm_voiceadminflags
new Handle:g_VoiceAdminFlags = INVALID_HANDLE;
new g_VoiceAdminFlagsValues[MAX_FLAGS] = {-1, ...};

// Holds each client's mute status
new bool:g_ClientMuted[MAXPLAYERS + 1] = {true, ...};

public Plugin:myinfo = 
{
	name = "Voice Control",
	author = "Recon",
	description = "Limits who can use voice chat by flags.",
	version = "1.0",
	url = "No website yet..."
}


public OnPluginStart()
{
	// Create and hook sm_voiceadminflags
	g_VoiceAdminFlags = CreateConVar("sm_voiceadminflags", "a",
									 "Sets what flags are required to use voice chat \
									 (max 10 flags, seperated by commas).");
	HookConVarChange(g_VoiceAdminFlags, OnVoiceAdminFlags_Changed);
	
	// Hook events where we mute players
	HookEvent("player_spawn", Event_PlayerSpawn, EventHookMode_Post);
	HookEvent("player_death", Event_PlayerDeath, EventHookMode_Post);
}


public OnVoiceAdminFlags_Changed(Handle:cvar, const String:oldVal[], const String:newVal[])
{	
	// Reset the current list of flags
	for (new i = 0; i < MAX_FLAGS; i++)
		g_VoiceAdminFlagsValues[i] = -1;
	
	// Holds the list of flags
	decl String:temp[MAX_FLAGS][FLAG_LEN];

	// Get the list of flags
	ExplodeString(newVal, DELIMITER, temp, MAX_FLAGS, FLAG_LEN);	
	
	// Parse all the flags
	for (new i = 0; i < MAX_FLAGS; i++)
	{		
		// Determine which flag this is
		switch (temp[i][0])
		{
			case 'a':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_RESERVATION;				
			}
			case 'b':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_GENERIC;				
			}
			case 'c':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_KICK;				
			}
			case 'd':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_BAN;				
			}
			case 'e':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_UNBAN;	
			}
			case 'f':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_SLAY;
			}
			case 'g':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CHANGEMAP;
			}
			case 'h':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CONVARS;
			}
			case 'i':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CONFIG;
			}
			case 'j':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CHAT;
			}
			case 'k':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_VOTE;
			}
			case 'l':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_PASSWORD;
			}
			case 'm':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_RCON;
			}
			case 'n':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CHEATS;
			}
			case 'o':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CUSTOM1;
			}
			case 'p':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CUSTOM2;
			}
			case 'q':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CUSTOM3;
			}
			case 'r':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CUSTOM4;
			}
			case 's':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CUSTOM5;
			}
			case 't':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_CUSTOM6;
			}
			case 'z':
			{
				g_VoiceAdminFlagsValues[i] = ADMFLAG_ROOT;
			}
			
			default:
			{
				g_VoiceAdminFlagsValues[i] = -1;
			}
		}
		
	}
	
	// Set everyone's voice status
	for (new i = 1; i < TRUEMAXPLAYERS; i++)
	{
		if (IsClientInGame(i))
			OnClientPostAdminCheck(i);
	}
	
}


public OnClientPostAdminCheck(client)
{
	// Get the client's admin
	new AdminId:admin = GetUserAdmin(client);
	
	// Mute by default
	g_ClientMuted[client] = true;
	
	// Does this client have admin access?
	if (admin != INVALID_ADMIN_ID)
	{
		// See if they have the required flags to talk
		for (new i = 0; i < MAX_FLAGS; i++)
		{
			if (g_VoiceAdminFlagsValues[i] != -1 && GetAdminFlag(admin, g_VoiceAdminFlagsValues[i]))
			{
				// They have one of the flags, we won't mute them
				g_ClientMuted[client] = false;
				
				// We don't need to check any other flags
				break;
			}			
		}		
	}
	
	// Is this client getting muted?
	if (g_ClientMuted[client])
	{
		// Mute them
		SetClientListeningFlags(client, VOICE_MUTED);		
	}	
}


public Event_PlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	
	if (!client)
	{
		return;	
	}
	
	// Is this client getting muted?
	if (g_ClientMuted[client])
	{
		// Mute them
		SetClientListeningFlags(client, VOICE_MUTED);		
	}
	
}

public Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	
	if (!client)
	{
		return;	
	}
	
	// Is this client getting muted?
	if (g_ClientMuted[client])
	{
		// Mute them
		SetClientListeningFlags(client, VOICE_MUTED);		
	}
	
}