/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>

public Plugin:myinfo = 
{
	name = "Quiet Unassigned",
	author = "Recon and code from the basecomm stock plugin.",
	description = "Autosilences players until they join a team.",
	version = "1.1",
	url = "<- URL ->"
}

// Holds if players are silenced
new bool:g_Silenced[MAXPLAYERS + 1];

public OnPluginStart()
{
	// When a player chooses a real team, we want to unsilence them
	HookEvent("player_team", Event_PlayerTeam, EventHookMode_Post);
	
	// To handle text chat while not on a team
	RegConsoleCmd("say", Command_Say);
	RegConsoleCmd("say_team", Command_Say);	
}

public OnClientPostAdminCheck(client)
{	
	// Get the client's admin id
	new AdminId:admin = GetUserAdmin(client);
	
	// If this client isn't an admin, or if they are and don't have
	// the chat flag
	if (admin == INVALID_ADMIN_ID || !GetAdminFlag(admin, Admin_Chat))
	{
		// Silence them
		g_Silenced[client] = true;
		SetClientListeningFlags(client, VOICE_MUTED);		
	}	
}

public Action:Command_Say(client, args)
{
	// If this is a valid client
	if (client)
	{
		// And they are silenced
		if (g_Silenced[client])
		{
			// Drop the message
			return Plugin_Handled;		
		}
	}
	
	// Otherwise, allow it to pass
	return Plugin_Continue;
}

public Event_PlayerTeam(Handle:event, const String:name[], bool:dontBroadcast)
{
	// Get the client
	new client = GetClientOfUserId(GetEventInt(event, "userid"));
	
	// Valid client?
	if (client > 0 && IsClientConnected(client))
	{
		// Get the client's admin id
		new AdminId:admin = GetUserAdmin(client);
		
		// If this client isn't an admin, or if they are and don't have
		// the chat flag
		if (admin == INVALID_ADMIN_ID || !GetAdminFlag(admin, Admin_Chat))
		{
			// Get the team
			new team = GetEventInt(event, "team");
		
			// If this is a real team (e.g. not unassigned),
			// and the client is silenced
			if (team > 0 && g_Silenced[client])
			{
				// Unsilence
				g_Silenced[client] = false;
				SetClientListeningFlags(client, VOICE_NORMAL);			
			}		
		}
		
	}	
}