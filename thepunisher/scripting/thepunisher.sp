/* Plugin Template generated by Pawn Studio */

// THE BELOW HEADER MAY NOT BE REMOVED OR MODIFIED
//
// This file is part of The Punisher.
//
// The Punisher is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The Punisher is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with empvehicletools. If not, see <http://www.gnu.org/licenses/>.
//
// THE ABOVE HEADER MAY NOT BE REMOVED OR MODIFIED


#pragma semicolon 1
#include <sourcemod>


// ********* Enums ********* //

enum PUNISH
{
	PUNISH_SLAP = 0,
	PUNISH_BURN = 1,
	PUNISH_FREEZE = 2,
	PUNISH_DRUG = 3,
	PUNISH_REDUCEHP = 4
}


// ********* Globals ********* //

new Handle:g_Database = INVALID_HANDLE;

new bool:g_PunishClient[MAXPLAYERS + 1] = {false, ...};

new Handle:g_PunishTimers[MAXPLAYERS + 1] = {INVALID_HANDLE, ...};



public Plugin:myinfo = 
{
	name = "The Punisher",
	author = "Recon",
	description = "An automated admin abuse system.",
	version = "1.0",
	url = "<- URL ->"
}

public OnPluginStart()
{
	// Connect to the DB
	SQL_TConnect(GotDatabase, "thepunisher");
	
	// Add and remove punish cmds
	RegAdminCmd("sm_punishadd",
				Command_PunishAdd,
				ADMFLAG_ROOT,
				"Adds a player to the punisher DB.");
		
	RegAdminCmd("sm_punishremove",
				Command_PunishRemove,
				ADMFLAG_ROOT,
				"Removes a player from the punisher DB.");
				

	// Register events
	HookEvent("player_death", Event_PlayerDeath, EventHookMode_Post);
	HookEvent("player_spawn", Event_PlayerSpawn, EventHookMode_Post);
	

}



public Action:Event_PlayerSpawn(Handle:event, const String:name[], bool:dontBroadcast)
{
	// Get the userid and client
	new userid = GetEventInt(event, "userid");
	new client = GetClientOfUserId(userid);
	
	// Is this client on the list?
	if (g_PunishClient[client])
	{
		// Create the first timer
		
	}
	
	return Plugin_Continue;
	
}
 
public Action:Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	// Get the userid and client
	new userid = GetEventInt(event, "userid");
	new client = GetClientOfUserId(userid);
	
	// Is this client on the list?
	if (g_PunishClient[client])
	{	
		// Kill the punish timer for this client
		if (g_PunishTimers[client] != INVALID_HANDLE)
		{
			KillTimer(g_PunishTimers[client]);
			g_PunishTimers[client] = INVALID_HANDLE;
		}
	}	
	
	return Plugin_Continue;
}




public Action:Command_PunishAdd(client, args)
{
	if (args < 3)
	{
		ReplyToCommand(client, "Usage: sm_punishadd <name> <steam> <reason>");
		return Plugin_Handled;
	}
	
		
	decl String:name[50], String:steam[50], String:reason[256];
	
	// Get the command args
	new nameQL = GetCmdArg(1, name, sizeof(name)) * 2 + 1;
	new steamQL = GetCmdArg(2, steam, sizeof(steam)) * 2 + 1;
	new reasonQL = GetCmdArg(3, reason, sizeof(reason)) * 2 + 1;
 
	decl String:qName[nameQL], String:qSteam[steamQL], String:qReason[reasonQL];
	
	// Escape the command args
	SQL_EscapeString(g_Database, name, qName, nameQL);
	SQL_EscapeString(g_Database, steam, qSteam, steamQL);
	SQL_EscapeString(g_Database, reason, qReason, reasonQL);
	
	
	// Create the query
	new querylen = 256 + nameQL + steamQL + reasonQL;
	decl String:query[querylen];
	
	Format(query, querylen, 
			"INSERT INTO tblusers (name, steam, reason) VALUES ('%s', '%s', '%s')",
			qName, qSteam, qReason);
	
	// Send the query
	SQL_TQuery(g_Database, T_AddPlayer, query, client);
	LogAction(client, -1, "\"%L\" added %s to the punisher DB.", client, steam);
	
	return Plugin_Handled;
}

public T_AddPlayer(Handle:owner, Handle:hndl, const String:error[], any:data) 
{	
	if (hndl == INVALID_HANDLE)
	{
		LogError("[ThePunisher] Unable to add player: %s", error);
		ReplyToCommand(data, "[ThePunisher] Unable to add the player to the database.");
	}
	else
	{
		// Were we able to remove the player?
		if (SQL_GetAffectedRows(g_Database) == 1)
		{
			// Yes
			ReplyToCommand(data, "[ThePunisher] Player added to the database.");
		}		
	}	
}


public Action:Command_PunishRemove(client, args)
{
	if (args < 1)
	{
		ReplyToCommand(client, "Usage: sm_punishremove <steam>");
		return Plugin_Handled;
	}
	
	
	// Get the command arg
	decl String:steam[50];
	new steamQL = GetCmdArg(2, steam, sizeof(steam)) * 2 + 1;
	
	// Quote the steam
	decl String:qSteam[steamQL];
	SQL_EscapeString(g_Database, steam, qSteam, steamQL);
	
	
	// Create the query
	new querylen = 256 + steamQL;
	decl String:query[querylen];
	
	Format(query, querylen,
		   "DELETE FROM tblusers WHERE steam = '%s'",
		   qSteam);
	
	// Remove the player from the DB
	SQL_TQuery(g_Database, T_RemovePlayer, query, client);
	
	LogAction(client, -1, "\"%L\" removed %s from the punisher DB.", client, steam);
	
	return Plugin_Handled;
}

public T_RemovePlayer(Handle:owner, Handle:hndl, const String:error[], any:data) 
{	
	if (hndl == INVALID_HANDLE)
	{
		LogError("[ThePunisher] Unable to remove player: %s", error);
		ReplyToCommand(data, "[ThePunisher] Unable to remove the player from the database.");
	}
	else
	{
		// Were we able to remove the player?
		if (SQL_GetAffectedRows(g_Database) == 1)
		{
			// Yes
			ReplyToCommand(data, "[ThePunisher] Player removed from the database.");
		}		
	}	
}


/***************************** Threaded callbacks *****************************/

public GotDatabase(Handle:owner, Handle:hndl, const String:error[], any:data)
{
	if (hndl == INVALID_HANDLE)
	{
		LogError("[ThePunisher] Unable to connect to the DB: %s", error);
	}	
	else
	{
		// Get the driver
		decl String:driver[25];
		SQL_ReadDriver(hndl, driver, sizeof(driver));
		
		// If we're using sqlite, 
		if (strcmp(driver, "sqlite", false))
		{
			SQL_TQuery(hndl, T_Generic,
					  "CREATE TABLE IF NOT EXISTS tblusers (\
					    id INTEGER PRIMARY KEY NOT NULL,\
						name TEXT NOT NULL,\
						steam TEXT UNIQUE NOT NULL,\
						reason TEXT NOT NULL\
						);");		
			
		}
		
		// Save handle
		g_Database = hndl;
	}
}

public T_Generic(Handle:owner, Handle:hndl, const String:error[], any:data) 
{	
	if (hndl == INVALID_HANDLE)
		LogError("[ThePunisher] Query Failed: %s", error);	
}